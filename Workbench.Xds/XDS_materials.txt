# xDS

## Prerequisites & related sources

- What is data plane & control plane?
  - The data plane is composed of a set of intelligent proxies (Envoy) deployed as sidecars. These proxies mediate and control all network communication between microservices. They also collect and report telemetry on all mesh traffic.
  - The control plane manages and configures the proxies to route traffic.

- https://groups.google.com/forum/#!msg/grpc-io/0yGihF-EFQo/A4QKdXffBwAJ (official email deprecate grpclb)

## xDS Protocol 

- created by envoy gys
- family of protocols
- this protocol is exchanged using JSON/REST and proto3

x oznacza dowolny
D oznacza discovery
S oznacza service

- explained here -> https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a [DONE]

- SDS (service discovery service)  v1 (replaced by EDS in v2)
- CDS (cluster discovery service)  v1v2
- RDS (route discovery service)    v1v2
- LDS (listener discovery service) v1v2
- EDS (endpoint discovery service)   v2
- HSD (health discovery service)     v2
- ADS (aggregated discovery service) v2
- SDS (secret discovery service)     v2
- MS  (metric serice)             (???)
- RLS (rate limit service)        (???)

## Envoy xDS API 

- https://github.com/envoyproxy/envoy/tree/master/api - original repository 
- https://github.com/envoyproxy/data-plane-api - read-only mirror without the Envoy implementation

- https://github.com/envoyproxy/data-plane-api/blob/master/API_OVERVIEW.md [DONE]
- https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol [HERE]
  - https://github.com/kyessenov/envoy-api/blob/master/XDS_PROTOCOL.md (older version)

### who implements data-plane-api

- https://github.com/envoyproxy/go-control-plane
- https://github.com/envoyproxy/java-control-plane
- https://istio.io/docs/concepts/traffic-management/

### Api versions
source: https://www.envoyproxy.io/docs/envoy/latest/api/api_supported_versions

- v1 - deprecated, the legacy REST-JSON API, without gRPC support
- v2
- v3

### xDS subscriptions types

- Filesystem subscriptions (not covered by me)
- polling a REST-JSON URL (not covered by me)
- gRPC streams

### Variants of the xDS Transport Protocol

1. State of the World (Basic xDS): SotW, separate gRPC stream for each resource type
2. Incremental xDS: incremental, separate gRPC stream for each resource type
3. Aggregated Discovery Service (ADS): SotW, aggregate stream for all resource types
4. Incremental ADS: incremental, aggregate stream for all resource types

### Api flow
source: https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol#api-flow

Core resource types:
Listener, RouteConfiguration, Cluster, and ClusterLoadAssignment

#### How envoy works:

Steps:
- Envoy fetches all Listener and Cluster resources at startup.
- It then fetches whatever RouteConfiguration and ClusterLoadAssignment resources that are required by the Listener and Cluster resources. 
- In effect, every Listener or Cluster resource is a root to part of Envoy’s configuration tree.

Listener -> 0..1 RouteConfiguration, 
RouteConfiguration,  -> 1..* Cluster, ???????
Cluster -> 0..1 ClusterLoadAssignment

#### non-proxy client such as gRPC

A non-proxy client such as gRPC might start by fetching only the specific Listener resources that it is interested in. It then fetches the RouteConfiguration resources required by those Listener resources, followed by whichever Cluster resources are required by those RouteConfiguration resources, followed by the ClusterLoadAssignment resources required by the Cluster resources. In effect, the original Listener resources are the roots to the client’s configuration tree.


LRS that is going to be used by gRPC

https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/load_stats/v2/lrs.proto



## Terminology
- Cluster: A cluster is a group of logically similar endpoints that Envoy connects to. In v2, RDS routes points to clusters, CDS provides cluster configuration and Envoy discovers the cluster members via EDS.
- Downstream: A downstream host connects to Envoy, sends requests, and receives responses.
- Endpoint: An endpoint is an upstream host that is a member of one or more clusters. Endpoints are discovered via EDS.
- Listener: A listener is a named network location (e.g., port, unix domain socket, etc.) that can be connected to by downstream clients. Envoy exposes one or more listeners that downstream hosts connect to.
- Locality: A location where an Envoy instance or an endpoint runs. This includes region, zone and sub-zone identification.
- Management server: A logical server implementing the v2 Envoy APIs. This is not necessarily a single physical machine since it may be replicated/sharded and API serving for different xDS APIs may be implemented on different physical machines.
- Region: Geographic region where a zone is located.
- Sub-zone: Location within a zone where an Envoy instance or an endpoint runs. This allows for multiple load balancing targets within a zone.
- Upstream: An upstream host receives connections and requests from Envoy and returns responses.
- xDS: CDS/EDS/HDS/LDS/RLS/RDS/SDS APIs.
- Zone: Availability Zone (AZ) in AWS, Zone in GCP.